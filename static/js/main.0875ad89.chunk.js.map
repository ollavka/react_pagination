{"version":3,"sources":["components/Pagination/Pagination.tsx","components/PageItems/PageItems.tsx","components/PerPageSelector/PerPageSelector.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","props","total","currentPage","perPage","onPageChange","pageCount","Math","ceil","pages","Array","from","length","setPageLinkClassNames","pageNumber","classNames","active","setPageButtonsClassNames","type","isPrevButtonDisabled","isNextButtonDisabled","disabled","handleSelectNewPage","prevPage","nextPage","className","href","onClick","map","_","currPageNumber","PageItems","currentPageItems","item","PerPageSelector","itemsPerPage","handleChangeItemsPerPage","id","value","onChange","htmlFor","items","to","numbers","n","push","getNumbers","getNewPages","reduce","acc","idx","newPage","slice","App","useState","setCurrentPage","setItemsPerPage","firstItem","setFirstItem","lastItem","setLastItem","pageItems","setPageItems","useEffect","newPages","currLastItem","newLastItem","newFirstItem","event","target","page","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0875ad89.chunk.js","sourcesContent":["import { FC } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (page: number) => void;\n};\n\ntype Button = 'prev' | 'next';\n\nexport const Pagination: FC<Props> = (props) => {\n  const {\n    total,\n    currentPage = 1,\n    perPage,\n    onPageChange,\n  } = props;\n\n  const pageCount = Math.ceil(total / perPage);\n  const pages = Array.from({ length: pageCount });\n\n  const setPageLinkClassNames = (pageNumber: number) => {\n    return classNames('page-item', {\n      active: currentPage === pageNumber,\n    });\n  };\n\n  const setPageButtonsClassNames = (type: Button) => {\n    const isPrevButtonDisabled = type === 'prev' && currentPage === 1;\n    const isNextButtonDisabled = type === 'next' && currentPage === pageCount;\n\n    return classNames('page-item', {\n      disabled: isPrevButtonDisabled || isNextButtonDisabled,\n    });\n  };\n\n  const handleSelectNewPage = (type: Button) => {\n    const prevPage = currentPage - 1;\n    const nextPage = currentPage + 1;\n\n    switch (type) {\n      case 'prev':\n        if (prevPage > 0) {\n          onPageChange(prevPage);\n        }\n\n        break;\n\n      case 'next':\n        if (nextPage < pageCount + 1) {\n          onPageChange(nextPage);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={setPageButtonsClassNames('prev')}>\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={currentPage === 1}\n          onClick={() => handleSelectNewPage('prev')}\n        >\n          «\n        </a>\n      </li>\n\n      {pages.map((_, pageNumber) => {\n        const currPageNumber = pageNumber + 1;\n\n        return (\n          <li\n            key={currPageNumber}\n            className={setPageLinkClassNames(currPageNumber)}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${currPageNumber}`}\n              onClick={() => onPageChange(currPageNumber)}\n            >\n              {currPageNumber}\n            </a>\n          </li>\n        );\n      })}\n\n      <li className={setPageButtonsClassNames('next')}>\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={currentPage === pageCount}\n          onClick={() => handleSelectNewPage('next')}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import { FC } from 'react';\n\ntype Props = {\n  currentPageItems: string[];\n};\n\nexport const PageItems: FC<Props> = ({ currentPageItems }) => (\n  <ul>\n    {currentPageItems.map(item => (\n      <li data-cy=\"item\" key={item}>{item}</li>\n    ))}\n  </ul>\n);\n","import { FC, ChangeEvent } from 'react';\n\ntype Props = {\n  itemsPerPage: number;\n  handleChangeItemsPerPage: (\n    event: ChangeEvent<HTMLSelectElement>\n  ) => void;\n};\n\nexport const PerPageSelector: FC<Props> = (props) => {\n  const {\n    itemsPerPage,\n    handleChangeItemsPerPage,\n  } = props;\n\n  return (\n    <div className=\"form-group row\">\n      <div className=\"col-3 col-sm-2 col-xl-1\">\n        <select\n          data-cy=\"perPageSelector\"\n          id=\"perPageSelector\"\n          className=\"form-control\"\n          value={itemsPerPage}\n          onChange={handleChangeItemsPerPage}\n        >\n          <option value=\"3\">3</option>\n          <option value=\"5\">5</option>\n          <option value=\"10\">10</option>\n          <option value=\"20\">20</option>\n        </select>\n      </div>\n\n      <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n        items per page\n      </label>\n    </div>\n  );\n};\n","import {\n  FC, useState, useEffect, ChangeEvent,\n} from 'react';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\nimport { PageItems } from './components/PageItems';\nimport './App.scss';\nimport { PerPageSelector } from './components/PerPageSelector';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nconst getNewPages = (itemsPerPage: number) => {\n  const pageCount = Math.ceil(items.length / itemsPerPage);\n\n  const newPageItems = Array\n    .from({ length: pageCount })\n    .reduce((acc: string[][], _, idx) => {\n      const newPage = items.slice(itemsPerPage * idx, itemsPerPage * (idx + 1));\n\n      acc.push(newPage);\n\n      return acc;\n    }, []);\n\n  return newPageItems;\n};\n\nexport const App: FC = () => {\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [itemsPerPage, setItemsPerPage] = useState<number>(5);\n  const [firstItem, setFirstItem] = useState<number>(1);\n  const [lastItem, setLastItem] = useState<number>(5);\n  const [pageItems, setPageItems] = useState<string[][]>(\n    getNewPages(itemsPerPage),\n  );\n\n  const currentPageItems = pageItems[currentPage - 1];\n\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  const handleChangeItemsPerPage = (event: ChangeEvent<HTMLSelectElement>) => {\n    setItemsPerPage(+event.target.value);\n  };\n\n  useEffect(() => {\n    const newPages = getNewPages(itemsPerPage);\n\n    setPageItems(newPages);\n    setCurrentPage(1);\n  }, [itemsPerPage]);\n\n  useEffect(() => {\n    const currLastItem = currentPage * itemsPerPage;\n\n    const newLastItem = currLastItem > items.length\n      ? (currLastItem - (currLastItem % items.length))\n      : currLastItem;\n\n    const newFirstItem = newLastItem - (pageItems[currentPage - 1].length) + 1;\n\n    setFirstItem(newFirstItem);\n    setLastItem(newLastItem);\n  }, [currentPage, itemsPerPage, pageItems]);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${firstItem} - ${lastItem} of ${items.length})`}\n      </p>\n\n      <PerPageSelector\n        itemsPerPage={itemsPerPage}\n        handleChangeItemsPerPage={handleChangeItemsPerPage}\n      />\n\n      <Pagination\n        total={items.length}\n        currentPage={currentPage}\n        perPage={itemsPerPage}\n        onPageChange={handlePageChange}\n      />\n\n      <PageItems currentPageItems={currentPageItems} />\n    </div>\n  );\n};\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}